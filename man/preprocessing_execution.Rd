% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/app_chain_execution.R
\name{preprocessing_execution}
\alias{preprocessing_execution}
\title{Preprocessing Execution Pipeline}
\usage{
preprocessing_execution(data_in)
}
\arguments{
\item{data_in}{The input data for the preprocessing pipeline.}
}
\value{
An instance of the `preprocessing_execution` R6 class, which allows for adding steps,
executing them, and retrieving results.
}
\description{
This function initializes and manages a preprocessing execution pipeline using the R6 class system.
The pipeline allows for adding multiple processing steps, executing them in a specified order,
and retrieving intermediate and final results, including input/output data and any plot results generated.
}
\details{
The `preprocessing_execution` function creates an R6 class to handle a series of preprocessing steps.
Each step is defined by a name and a function call. When executed, the steps are applied sequentially,
with each step receiving the output from the previous step. The results (both data and figures)
of each step can be retrieved later.

The pipeline supports the following methods:

- `add(name, func_call)`: Adds a new step to the pipeline. `name` is a string identifier for the step,
and `func_call` is the function call to be executed.

- `execute(step_names)`: Executes the pipeline steps in the order provided by `step_names`. Each step is executed
with the data from the previous step as input, and its results (input data, output data, and plot results)
are stored.

- `get_result(step_name = NULL)`: Retrieves the results for a specific step or all steps if no `step_name`
is provided. Each result contains the input data, output data, and any plot results from the step.

- `final_result()`: Retrieves the output data from the final executed step. If no steps have been executed,
`NULL` is returned.
}
\examples{
# Initialize the preprocessing pipeline
pipeline <- preprocessing_execution(data_in)

# Add a step to the pipeline
pipeline$add("step1", quote(your_function(.data)))

# Execute the pipeline
pipeline$execute(c("step1"))

# Get the results of a specific step
result <- pipeline$get_result("step1")

# Get the final result
final_output <- pipeline$final_result()

}
